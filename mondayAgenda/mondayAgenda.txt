🧭 Workshop – 🚀 Layout mindset, Display & Responsiv design  
⏰ Tid: ca 3h  
📚 Kurs: Grundläggande Frontend-programmering  
📅 Vecka 3 – Måndag 1 sept  

--------------------------------------------------

🎯 Lektionsmål  
Efter lektionen ska studenterna kunna:  

✅ Förklara arbetsgången: skiss → mockup → block → containers → elements  
✅ Förstå begreppen block, containers, elements och deras betydelse i HTML/CSS-struktur  
✅ Beskriva hur rendering & flow layout fungerar  
✅ Använda olika display-egenskaper (block, inline, inline-block, flex, grid)  
✅ Förstå mobile-first-principen och använda media queries med brytpunkter  

--------------------------------------------------

📌 Kort lektionsagenda  
- PowerPoint & Teori  
- Code-Along (mobil-först layout + media query)  
- Självständiga övningar  
- Reflektion & Q&A  

--------------------------------------------------

📝 Lektionsplanering (3 timmar)  

**00:00–00:50 – PowerPoint & Teori (Slides 1–46)**  
**00:50–01:25 – Code-Along** (mobil-först layout, brytpunkt 768px)  
**01:25–02:15 – Självständiga övningar**  
**02:15–03:00 – Reflektion & Q&A**

--------------------------------------------------
--------------------------------------------------
--------------------------------------------------

📢 PowerPoint – Slides & Talarmanus (1–46)

🟨 Slide 1 – Layout mindset och tekniker  
🗣️ “Idag fokuserar vi på hur man tänker layout innan man skriver kod – rätt mindset sparar massor med CSS senare.”

--------------------------------------------------

🟨 Slide 2 – Arbetsgång  
🗣️ “Arbeta i steg: skiss → mockup → blocka → containers → elements. Varje steg minskar gissningar i koden.”

--------------------------------------------------

🟨 Slide 3 – Skiss  
🗣️ “Börja analogt. Papper/penna är snabbt och gör det billigt att ändra efter feedback.”

--------------------------------------------------

🟨 Slide 4 – Mockup  
🗣️ “Figma/XD/PS ger detaljer. Ju tydligare mockup, desto enklare att planera HTML-struktur och välja rätt layoutteknik.”

--------------------------------------------------

🟨 Slide 5 – Koda utifrån och in  
🗣️ “Börja med block (sidorader/sektioner), sedan containers, sist elements. Koda klart ett "lager" i taget.”

--------------------------------------------------

🟨 Slide 6 – Blocka upp  
🗣️ “Identifiera stora block i designen. Det gör HTML-skelettet tydligt innan du finlirar.”

--------------------------------------------------

🟨 Slide 7 – Block  
🗣️ “Block = de stora delarna (header, hero, main, footer). Ofta med max-width och centrering.”

--------------------------------------------------

🟨 Slide 8 – Containers  
🗣️ “Containers grupperar innehåll inom ett block (t.ex. kortlista). Undvik container-i-container i onödan.”

--------------------------------------------------

🟨 Slide 9 – Element  
🗣️ “Minsta byggbit: bild, rubrik, text, knapp. Justera enstaka element med ‘pin-metoden’ (margin) vid behov.”

--------------------------------------------------

🟨 Slide 10 – Att blocka upp  
🗣️ “Vinster: ren HTML, mindre CSS, färre specialfall. Det blir lättare att samarbeta.”

--------------------------------------------------

🟨 Slide 11 – Övning: definiera block/containers/elements  
🗣️ “Parvis: peka ut block/containers/elements i layouten. Träna ögat – det styr din HTML.”

--------------------------------------------------

🟨 Slide 12 – (Bildslide)  
🗣️ “Exempel på uppblockad sida – notera hur få klasser som behövs när strukturen är tydlig.”

--------------------------------------------------

🟨 Slide 13 – Rendering (flow layout)  
🗣️ “Standardflöde: block bryter rad, inline följer raden. Vi ändrar beteende med display/positionering.”

--------------------------------------------------

🟨 Slide 14 – Positionering (översikt)  
🗣️ “Kort översikt: static → standard, relative/absolute/fixed/sticky ger manuella förskjutningar. Vi djupdyker senare.”

--------------------------------------------------

🟨 Slide 15 – Exempel: vertikal centrering  
🗣️ “Visa hur centrering kan lösas med moderna layouter (flex/grid) istället för gamla hacks.”

--------------------------------------------------

🟨 Slide 16 – Positionering (förtydligande)  
När vi pratar positionering finns två viktiga begrepp: relative och absolute. Ett element med position: relative stannar kvar i det normala sidflödet, men vi kan flytta det lite med top/right/bottom/left. Med position: absolute tas elementet helt ur flödet och placeras i förhållande till sin närmaste positionerade förälder. Tänk: relative = ‘stanna på plats men kan justeras’, absolute = ‘koppla loss från flödet och placera manuellt’.

--------------------------------------------------

🟨 Slide 17 – position: relative  
🗣️ “Relative behåller sin plats i dokumentflödet men kan flyttas några pixlar för finjustering.”

--------------------------------------------------

🟨 Slide 18 – position: absolute  
🗣️ “Absolute placeras i förhållande till närmaste förälder som har en annan position än static. Om ingen sådan finns, placeras den mot hela sidan. Det är bra för saker som badges, overlays eller tooltips. Men – var försiktig, för du kan lätt få problem med z-index och att element hamnar framför/bakom på fel sätt.”

--------------------------------------------------

🟨 Slide 19 – Träna på positionering  
🗣️ “Tips: MDN-övningar för position. Använd när ni behöver specialplacering.”

--------------------------------------------------

🟨 Slide 20 – Display  
🗣️ “Display styr hur element ritas: block, inline, inline-block, flex, grid, table… Välj minsta kraft som löser problemet.”

--------------------------------------------------

🟨 Slide 21 – Display, forts.  
🗣️ “inline-block ger inline-beteende men tillåter width/height. Använd sparsamt – flex/grid är oftast tydligare.”

--------------------------------------------------

🟨 Slide 22 – Display, forts. (tabelliknande)  
🗣️ “Man kan emulera tabell med CSS, men använd riktiga `<table>` för tabulär data. Layout → flex/grid.”

Emulera = härma något. Exempel: man kan “emulera tabeller” med CSS grid/flex, men det blir inte riktiga <table>-element.

Tabulär data = data i tabellform, som rader och kolumner (t.ex. schema, statistik).

👉 Poängen: använd riktiga <table> när det är data, men använd CSS-layouter när det bara är design.

--------------------------------------------------

🟨 Slide 23 – Display: flex  
🗣️ “Flex = 1D-layout (rad ELLER kolumn). Perfekt för nav, kortlistor, centering.”

--------------------------------------------------

🟨 Slide 24 – CSS Grid  
🗣️ “Grid = 2D-layout (rad OCH kolumn). Använd på containers, inte på items.”

--------------------------------------------------

🟨 Slide 25 – “Holy Grail” layout  
🗣️ “Klassisk header + footer + sidebar + content. Löses smidigt med grid/flex.”

--------------------------------------------------

🟨 Slide 26 – Responsiv design  
🗣️ “Responsiv = fungerar bra på alla skärmar. Brytpunkter med media queries anpassar layout och typografi.”

--------------------------------------------------

🟨 Slide 27 – Definition (citat)  
🗣️ “Målet: sidor som både ser bra ut och fungerar överallt – inte bara skalas ned.”

--------------------------------------------------

🟨 Slide 28 – Icke-responsiv design  
🗣️ “Exempel på vad som ‘går sönder’ när layout inte anpassas: horisontell scroll, ologiska hopp.”

--------------------------------------------------

🟨 Slide 29 – Mobile first  
🗣️ “Börja smått: lös kärnuppgiften för mobil, bygg sedan upp till större skärmar.”

--------------------------------------------------

🟨 Slide 30 – Mobile-first (video)  
🗣️ “Kort inspirationsklipp: varför mobile-first ger bättre fokus och enklare skalning.”

--------------------------------------------------

🟨 Slide 31 – Designtips – mobile first  
🗣️ “Prioritera innehåll, tydlig hierarki, undvik onödiga element. Enkelhet skalar upp bättre.”

--------------------------------------------------

🟨 Slide 32 – (Bildslide)  
🗣️ “Exempel på mobil → desktop-progression. Notera hur samma block växer i komplexitet.”

--------------------------------------------------

🟨 Slide 33 – Olika sorters enheter  
🗣️ “px, %, rem, em, vh/vw – välj relativa enheter där det går för att underlätta responsivitet.”

--------------------------------------------------

🟨 Slide 34 – Att tänka på – mobile first  
🗣️ “Tänk performance, läsbarhet och innehåll först. Server-rendering betyder att sidan byggs på servern och skickas färdig till webbläsaren, istället för att byggas upp med JavaScript. Det gör ofta att mobiler får en snabbare, enklare första upplevelse.”

Server-rendering betyder att HTML genereras på servern innan sidan skickas till webbläsaren.

Motsats: client-side rendering, där webbläsaren bygger upp sidan med JavaScript (t.ex. React).

Varför nämns det här? För att responsiv design + mobile-first också påverkas av hur snabbt sidan levereras. Server-rendering kan ge snabbare upplevelse på mobiler eftersom färdig HTML skickas direkt.

--------------------------------------------------

🟨 Slide 35 – Media queries (idé)  
🗣️ “Säg: ‘Om skärmen är minst 768px, gör X’. Vi skriver villkor som anpassar layout/stil.”

--------------------------------------------------

🟨 Slide 36 – Media queries (syntax)  
🗣️ *"Media queries gör att vi kan ändra CSS beroende på förutsättningar. Det finns två huvuddelar:

Media types – vilken typ av media: screen, print, all.

Media features – egenskaper: t.ex. min-width, max-width, orientation.

En typisk regel är:

@media screen and (min-width: 768px) { … }


Det betyder: om enheten är en skärm, och bredden är minst 768px → använd dessa CSS-regler. Det är så vi gör layouten responsiv."*

--------------------------------------------------

🟨 Slide 37 – Media queries (kodexempel)  
🗣️ “Visa ett konkret exempel som ändrar bakgrund/layout när bredden passerar 768px.”

--------------------------------------------------

🟨 Slide 38 – Media queries (resurser)  
🗣️ “CSS-Tricks har en komplett guide – bra referens när ni fastnar.”

--------------------------------------------------

🟨 Slide 39 – Breakpoints  
🗣️ “Sätt brytpunkter baserat på när din design ‘går sönder’, inte enbart på enhetslistor.”

--------------------------------------------------

🟨 Slide 40 – Olika skärmar  
🗣️ “Testa på flera storlekar. Device-lab är lyx – men DevTools räcker långt.”

--------------------------------------------------

🟨 Slide 41 – Tips för responsiv design  
🗣️ “Skala typografi, använd rimliga max-bredder, lägg sekundärt innehåll längre ned.”

--------------------------------------------------

🟨 Slide 42 – Felsöka media queries  
🗣️ “Sätt tillfälligt `background`/`border` i dina queries för att se att de faktiskt triggas.”

--------------------------------------------------

🟨 Slide 43 – display: none;  
🗣️ “Du kan dölja element vid vissa brytpunkter – men var varsam, särskilt med tillgänglighet.”

--------------------------------------------------

🟨 Slide 44 – Testa olika skärmar  
🗣️ “DevTools: ‘Toggle device toolbar’. Byt storlek och se layouten svara i realtid.”

--------------------------------------------------

🟨 Slide 45 – Skapa en övningssida  
🗣️ “Uppgift: bygg en enkel sida mobil-först, lägg in minst en media query och gör den snygg på desktop.”

--------------------------------------------------

🟨 Slide 46 – Läs mer  
🗣️ “Fördjupning: pseudo-klasser, flera layouts, grid-mönster – bra att spara som bokmärken.”

--------------------------------------------------
--------------------------------------------------
--------------------------------------------------

💻 Code-Along – Mobil-först layout + media query (768px)

1. 📝 indexCA.html  
Genomför den koden.

-----------------------------------------
2. 📝 stylesCA/styleCA.css
Genomför den koden.

--------------------------------------------------
--------------------------------------------------
--------------------------------------------------

Självständiga övningar finns i exercises.txt

--------------------------------------------------
--------------------------------------------------
--------------------------------------------------

Reflektion & Q&A

📢 Diskussionsfrågor:

🔹 Lätta

Vad betyder mobile-first för dig?

Hur hjälpte tänket block → containers → elements dig att minska mängden CSS?

Vad fick dig att välja just din brytpunkt – när “gick layouten sönder”?

🔹 Medel

Varför tror du att många företag alltid börjar sina projekt med skisser/mockups?

Hur kan containers göra koden mer överskådlig?

När är det bättre att använda flex än grid?

🔹 Avancerade

Hur kan media queries användas för mer än bara layout (ex. dölja element)?

Vad skulle hända om vi inte använde mobile-first-tänk?

Hur kan en dålig struktur på block/containers/elements leda till mer CSS och svårare underhåll?